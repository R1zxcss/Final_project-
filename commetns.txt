Импортируем библиотеку tkinter и sqlite3

Код создает класс Main, который является наследником класса tk.Frame. В конструкторе класса инициализируются основные элементы интерфейса и устанавливаются обработчики событий.
Функция init_main создает верхнюю панель инструментов (toolbar), на которой располагаются кнопки для добавления, редактирования, удаления, поиска и обновления записей в базе данных. Эти кнопки и их изображения добавляются в toolbar.
Кроме того, в функции init_main создается таблица (ttk.Treeview) для отображения данных из базы данных. Определяются столбцы таблицы (ID, name, tel, email, wages). Также задаются заголовки столбцов.
Метод open_dialog вызывает дочернее окно Child, которое используется для добавления новых записей в базу данных.
Метод records используется для добавления записей в базу данных. Он вызывает метод insert_data объекта db, который добавляет запись в базу данных. После добавления записи вызывается метод view_records, который обновляет отображение данных в таблице.
Метод view_records получает все записи из базы данных с помощью SQL-запроса "SELECT * FROM db". Затем он удаляет все ранее отображенные записи из таблицы и добавляет новые записи из полученного результата SQL-запроса.
Метод open_update_dialog вызывает дочернее окно Update, которое используется для редактирования существующих записей в базе данных.
Метод update_records используется для обновления существующих записей в базе данных. Он вызывает метод execute объекта cursor с SQL-запросом "UPDATE db SET name=?, tel=?, email=?, wages=? WHERE id=?", в котором вместо вопросительных знаков подставляются значения аргументов name, tel, email, wages и id. Затем вызывается метод commit объекта conn, чтобы сохранить изменения в базе данных, и метод view_records для обновления отображения данных в таблице.
Метод delete_records используется для удаления выбранных записей из базы данных. Он проходит по всем выбранным элементам в таблице, вызывает метод execute объекта cursor с SQL-запросом "DELETE FROM db WHERE id=?", в котором вместо вопросительного знака подставляется значение id выбранного элемента. Затем вызывается метод commit объекта conn для сохранения изменений в базе данных, и метод view_records для обновления отображения данных в таблице.
Метод open_search_dialog вызывает дочернее окно Search, которое используется для поиска записей в базе данных.
Метод search_records используется для поиска записей в базе данных по имени. Он вызывает метод execute объекта cursor с SQL-запросом "SELECT * FROM db WHERE name LIKE ?", в котором вместо вопросительного знака подставляется значение аргумента name с добавлением символов '%' для поиска частичного совпадения имени. Затем вызывается метод view_records для обновления отображения данных в таблице.
Метод refresh_page обновляет страницу приложения, вызывая метод update объекта root. Это может быть полезно после выполнения операции, чтобы обновить отображение данных в таблице.

Этот код представляет собой определение класса "Child" наследующего от класса "Toplevel" из библиотеки tkinter. Этот класс представляет окно верхнего уровня.
Внутри метода "init" определяются действия, которые выполняются при создании объекта класса "Child":
Вызывается метод "init" класса-родителя "Toplevel", передавая ему объект "root" как параметр.
Вызывается метод "init_child()", который инициализирует все элементы окна и его свойства.
Устанавливается переменная "view" равной переменной "app".
Метод "init_child()" инициализирует все элементы окна "Child" и его свойства:
Устанавливается заголовок окна "Добавить".
Устанавливается размер окна 400x220 и запрещается его изменение.
Вызываются методы "grab_set()" и "focus_set()", чтобы окно стало активным и получило фокус.
Далее создаются и размещаются на окне виджеты Label (метки) и Entry (поля ввода):
Создается и размещается метка "ФИО:" с текстом "ФИО:" на координатах (50, 50).
Создается и размещается метка "Телефон:" с текстом "Телефон:" на координатах (50, 80).
Создается и размещается метка "E-mail:" с текстом "E-mail:" на координатах (50, 110).
Создается и размещается метка "Зарплата:" с текстом "Зарплата:" на координатах (50, 140).
Создается поле ввода entry_name типа ttk.Entry и размещается на координатах (200, 50).
Создаетcя поле ввода entry_email типа ttk.Entry и размещается на координатах (200, 80).
Создается поле ввода entry_tel типа ttk.Entry и размещается на координатах (200, 110).
Создается поле ввода entry_wages типа ttk.Entry и размещается на координатах (200, 140).
После создания полей ввода создаются и размещаются на окне кнопки "Закрыть" и "Добавить", которые имеют тип ttk.Button:
Создается кнопка "Закрыть" с текстом "Закрыть" и привязывается к методу "destroy()" для закрытия окна. Кнопка размещается на координатах (220, 170).
Создается кнопка "Добавить" с текстом "Добавить" и размещается на координатах (300, 170).
После создания кнопок происходит привязка события "Button-1" (левая кнопка мыши) к функции lambda, которая вызывается при нажатии кнопки "Добавить". Внутри функции передаются значения, полученные из полей ввода entry_name, entry_email, entry_tel и entry_wages. Определяется метод records объекта view (переменная app), который будет обрабатывать значения полей ввода.
Таким образом, данный код создает окно "Child" с метками и полями ввода для ввода данных, а также кнопками для добавления и закрытия окна. При нажатии кнопки "Добавить" вызывается метод records объекта view, который обрабатывает введенные данные.

Функция Update(Child) представляет собой класс-наследник суперкласса __init__. В конструкторе класса инициализируются атрибуты view и db, которые присваиваются значениями app и db соответственно. Затем вызывается метод default_data(), который заполняет поля ввода данными из базы данных.
Метод init_edit() инициализирует окно редактирования контакта. Внутри метода создается кнопка btn_edit, которая располагается на окне с помощью метода place(). Затем к кнопке привязывается обработчик события нажатия кнопки <Button-1>. Обработчик представляет собой анонимную функцию, которая вызывает метод update_records() объекта view. Этому методу передаются значения полей ввода entry_name, entry_email, entry_tel и entry_wages. Кроме того, кнопке btn_edit привязывается еще один обработчик события нажатия кнопки <Button-1>. Этот обработчик вызывает метод destroy(), который закрывает окно редактирования. Кнопка btn_ok удаляется с помощью метода destroy().
Метод default_data() извлекает данные из базы данных и заполняет поля ввода значениями. В методе используется атрибут tree объекта view, который служит для отображения данных из базы данных в виде таблицы. При помощи метода set() атрибуту tree.selection()[0] передается значение первого столбца выбранной строки в таблице. Затем выполняется SQL-запрос к базе данных, в котором выбираются все поля из строки с указанным id. Полученный результат запроса сохраняется в переменной row. Значения полей из переменной row вставляются в поля ввода entry_name, entry_email, entry_tel и entry_wages.

Код представляет класс Search, который наследуется от класса tk.Toplevel из библиотеки Tkinter для создания окна поиска контакта. Проанализируем код поэтапно:
В конструкторе класса Search вызывается конструктор super().__init__(), чтобы инициализировать окно поиска как подкласс класса Toplevel.
В конструкторе далее вызывается метод init_search(), который настраивает окно поиска, устанавливает его заголовок, размеры и запрет на изменение размеров окна.
Затем создается объект label_search класса tk.Label, который будет отображать текст "ФИО:". Метод place() вызывается для задания позиции этого элемента на окне поиска.
Создается объект entry_search класса ttk.Entry, который представляет поле ввода текста для ввода ФИО контакта. Метод place() вызывается для задания позиции этого поля на окне поиска.
Создается объект btn_cancel класса ttk.Button, который представляет кнопку "Закрыть". Метод place() вызывается для задания позиции этой кнопки на окне поиска. Опция command=self.destroy указывает, что при нажатии на кнопку, будет вызван метод destroy(), который закрывает окно поиска.
Создается объект search_btn класса ttk.Button, который представляет кнопку "Найти". Метод place() вызывается для задания позиции этой кнопки на окне поиска.
search_btn.bind() используется для связывания события <Button-1> (нажатие левой кнопки мыши) с функцией-обработчиком self.view.search_records(self.entry_search.get()). Код self.entry_search.get() используется для получения введенного текста из поля поиска и передачи его в метод search_records() объекта self.view.
search_btn.bind() также используется для связывания события <Button-1> с функцией-обработчиком self.destroy(), который будет вызван после выполнения функции-обработчика self.view.search_records(self.entry_search.get()). Опция add="+" указывает, что этот обработчик будет добавлен после основного обработчика события.
Таким образом, данный код создает окно поиска контакта с полями ввода ФИО и кнопками "Найти" и "Закрыть". При нажатии на кнопку "Найти" вызывается метод search_records() объекта self.view, который будет выполнять поиск записей с заданным ФИО. Также при нажатии на кнопку "Найти" окно поиска будет закрыто.

Этот код создает класс DB, который используется для работы с базой данных SQLite.
В методе __init__ класса DB создается подключение к базе данных db.db и получается курсор для выполнения SQL-запросов. Затем, используя курсор, создается таблица db, если она не существует. Таблица имеет следующие столбцы:
id с типом данных INTEGER и является первичным ключом,
name с типом данных TEXT,
tel с типом данных TEXT,
email с типом данных TEXT,
wages с типом данных TEXT. Метод commit() вызывается для сохранения изменений в БД.
Метод insert_data служит для вставки данных в таблицу db. Он принимает значения name, tel, email и wages, и выполняет SQL-запрос на вставку в таблицу с помощью курсора. Метод commit() вызывается для сохранения изменений в БД.
Далее, код создает экземпляр класса DB с именем db.
Затем, код создает экземпляр класса Main, который не показан в данном фрагменте кода.
Далее, устанавливаются некоторые параметры для окна приложения root, такие как заголовок, размеры окна и возможность изменения размера окна.
Наконец, приложение входит в бесконечный цикл обработки событий mainloop(), который отображает окно приложения и ожидает действий пользователя.
Код служит для создания базы данных, таблицы и методов для работы с базой данных в приложении, основанном на библиотеке Tkinter.



